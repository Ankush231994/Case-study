title: "Google Data Analytics Capstone"
author: "Ankush Koul"
date: '2022-03-09'
output:
  html_document: default
  pdf_document: default
subtitle: Cyclistics Case Study
---

#### Tools Used

-   Excel
-   MySQL
-   Tableau
-   RStudio

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Scenario

You are a junior data analyst working in the marketing analyst team at Cyclistic, a bike-share company in Chicago. The director of marketing believes the company's future success depends on maximizing the number of annual memberships. Therefore, your team wants to understand how casual riders and annual members use Cyclistic bikes differently. From these insights, your team will design a new marketing strategy to convert casual riders into annual members. But first, Cyclistic executives must approve your recommendations, so they must be backed up with compelling data insights and professional data visualizations.

![](https://miro.medium.com/max/1400/1*dKXQMU1QAjgh4gQeIuMCMQ.jpeg)

I have used the six steps of the data analysis process learned through out the 8 courses in the Google Data Analytics program to answer key business questions. Ask, prepare, process, analyze, share, and act.

## Ask

In this step, I had to find out 'How do annual members and casual riders use Cyclistic bikes differently?' to guide my analysis. Lily Moreno, the director of marketing believes annual Members are much more profitable than Casual riders. As a junior data analyst working at Cyclistic, my task is to help the marketing team analyze the differences between Casual riders and Members with the goal of providing recommendations that will help convert Casual riders into annual Members to maximize profit.

## Prepare

I downloaded the dataset that is used for this case study and stored it. I was required to download data for the last 6 months. I downloaded trip data between January 2021-June 2021. You can access the datasets [here](https://divvy-tripdata.s3.amazonaws.com/index.html). It is a public dataset provided by Motivate International Inc.

## Process

I combined the separate files into one excel workbook. I then cleaned the data by removing duplicates, deleting rows that had ride start time later than ride end time (ie started_at \> ended_at). I imported the data into Microsoft SQL server to clean the data faster. I deleted rows with NULLS in columns like station_id, station_name. I exported the data back into Excel using Power Query to merge all tables into a single table.

## Analyze

I created the ride_length column to calculate the trip duration, Day_of_week to populate what day of the week the ride was taken in Excel. Pivot tables were used to help me summarize data. I then moved to RStudio to create data frames and visualize data with ggplot2. I calculated and summarized the data using functions such as mean, median, max, and min in R

## Share

I created more data visualizations in Tableau. I then combined the visualizations on a dashboard that can be viewed [here](https://public.tableau.com/app/profile/ankush.koul/viz/CyclistsCasestudy1/Cyclisticbike_share). It was interesting to see similar patterns in all tools; the spreadsheet, Tableau, and in R. To view my R code in GitHub, click [here](https://github.com/Ankush231994/Case-study).

```{r loading packages, include=FALSE}
library(tidyverse) 
library(lubridate) 
library(ggplot2)
library(dplyr)

```

```{r load Data, include=FALSE}
jan <- read.csv("202101-divvy-tripdata.csv")
feb <- read.csv("202102-divvy-tripdata.csv")
march <- read.csv("202103-divvy-tripdata.csv")
april <- read.csv("202104-divvy-tripdata.csv")
may <- read.csv("202105-divvy-tripdata.csv")
june <- read.csv("202106-divvy-tripdata.csv")


#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================

# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file

colnames(jan)
colnames(feb)
colnames(march)
colnames(april)
colnames(may)
colnames(june)

# all columes matched

# Inspect the dataframes and look for incongruencies

str(jan)
str(feb)
str(march)
str(april)
str(may)
str(june)

# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(jan, feb, march, april, may, june)


# Remove lat, long, fields 
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng,))

#======================================================
# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#======================================================

# Inspect the new table that has been created

colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics

# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")


#convert start and end date into date-time formated to calculate the Ride length
all_trips$started_at = as.POSIXlt(all_trips$started_at, format ="%Y-%m-%d %H:%M:%S" )
all_trips$ended_at = as.POSIXlt(all_trips$ended_at, format ="%Y-%m-%d %H:%M:%S" )

# Add a "ride_length" calculation to all_trips (in seconds)
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

# Inspect the structure of the columns
str(all_trips)

# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed

all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]


#=====================================
# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
#=====================================

# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length, na.rm = TRUE) #straight average (total ride length / rides)
median(all_trips_v2$ride_length, na.rm = TRUE) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length,na.rm = TRUE) #longest ride
min(all_trips_v2$ride_length, na.rm = TRUE) #shortest ride


# Condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)

# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)



```

## Visulization

Here we will go through the series of visualizations

## Number of rides by rider type

Here is the plot for number of rides taken by causal and subscribed members

```{r visualize number of rides by rider type, echo=FALSE, message=FALSE, warning=FALSE, paged.print=FALSE}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% drop_na() %>%
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")
```
